name: Create Jira issue
permissions:
  contents: write
  issues: write
  pull-requests: write

on:
  issues:
    types: [opened]

jobs:
  create-issue:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃 (가장 먼저 실행!)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev

      # 2. Jira 로그인
      - name: Login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      # 3. Issue Parser
      - name: Issue Parser
        id: issue-parser
        uses: stefanbuck/github-issue-parser@v3
        with:
          template-path: .github/ISSUE_TEMPLATE/issue-form.yml
        continue-on-error: true

      # 4. Issue Parser 결과 확인
      - name: Check Issue Parser Result
        run: |
          if [ "${{ steps.issue-parser.outcome }}" = "success" ]; then
            echo "Issue parser succeeded"
            echo "PARSER_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "Issue parser failed - will use manual parsing"
            echo "PARSER_SUCCESS=false" >> $GITHUB_ENV
          fi

      # 5. Manual Parse Issue Body
      - name: Manual Parse Issue Body
        id: manual-parser
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          echo "Parsing issue body manually..."
          
          # 상위 작업 추출 (🎟️ 상위 작업 섹션에서)
          PARENT_KEY=$(echo "$ISSUE_BODY" | grep -A 2 "상위 작업" | tail -1 | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
          if [ "$PARENT_KEY" = "_No response_" ] || [ -z "$PARENT_KEY" ]; then
            PARENT_KEY=""
          fi
          
          # 브랜치명 추출 (🌳 브랜치명 섹션에서)
          BRANCH_NAME=$(echo "$ISSUE_BODY" | grep -A 2 "브랜치명" | tail -1 | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
          if [ "$BRANCH_NAME" = "_No response_" ] || [ -z "$BRANCH_NAME" ]; then
            BRANCH_NAME=""
          fi
          
          echo "Manually parsed parent key: '$PARENT_KEY'"
          echo "Manually parsed branch name: '$BRANCH_NAME'"
          
          echo "manual_parentKey=$PARENT_KEY" >> $GITHUB_OUTPUT
          echo "manual_branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # 6. Debug Issue Parser Outputs
      - name: Debug Issue Parser Outputs
        run: |
          echo "=== Issue Parser 전체 출력 디버깅 ==="
          echo "Parser Success: ${{ env.PARSER_SUCCESS }}"
          echo "issueparser_branch: '${{ steps.issue-parser.outputs.issueparser_branch }}'"
          echo "issueparser_description: '${{ steps.issue-parser.outputs.issueparser_description }}'"
          echo "issueparser_parentKey: '${{ steps.issue-parser.outputs.issueparser_parentKey }}'"
          echo "issueparser_tasks: '${{ steps.issue-parser.outputs.issueparser_tasks }}'"
          echo "manual_parentKey: '${{ steps.manual-parser.outputs.manual_parentKey }}'"
          echo "manual_branch: '${{ steps.manual-parser.outputs.manual_branch }}'"
          echo "GitHub Issue Title: '${{ github.event.issue.title }}'"
          echo "GitHub Issue Body: '${{ github.event.issue.body }}'"
          echo "=================================="

      # 7. Markdown → Jira 변환
      - name: Convert markdown to Jira Syntax
        id: md2jira
        uses: peter-evans/jira2md@v1
        with:
          input-text: |
            ### Github Issue Link
            - ${{ github.event.issue.html_url }}
            ${{ github.event.issue.body }}
          mode: md2jira

      # 8. Jira Task 생성 (상위 작업 조건부 처리)
      - name: Create Issue with Parent
        id: create-with-parent
        if: env.PARSER_SUCCESS == 'true' && steps.issue-parser.outputs.issueparser_parentKey != '' || env.PARSER_SUCCESS == 'false' && steps.manual-parser.outputs.manual_parentKey != ''
        uses: atlassian/gajira-create@v3
        with:
          project: TREKA
          issuetype: Task
          summary: '${{ github.event.issue.title }}'
          description: '${{ steps.md2jira.outputs.output-text }}'
          parent: '${{ env.PARSER_SUCCESS == ''true'' && steps.issue-parser.outputs.issueparser_parentKey || steps.manual-parser.outputs.manual_parentKey }}'

      - name: Create Issue without Parent
        id: create-without-parent
        if: env.PARSER_SUCCESS == 'true' && steps.issue-parser.outputs.issueparser_parentKey == '' || env.PARSER_SUCCESS == 'false' && steps.manual-parser.outputs.manual_parentKey == ''
        uses: atlassian/gajira-create@v3
        with:
          project: TREKA
          issuetype: Task
          summary: '${{ github.event.issue.title }}'
          description: '${{ steps.md2jira.outputs.output-text }}'

      # 9. 생성된 이슈 번호 통합 및 검증
      - name: Set Issue Number
        id: set-issue
        run: |
          ISSUE_NUM=""
          if [ "${{ steps.create-with-parent.outputs.issue }}" != "" ]; then
            ISSUE_NUM="${{ steps.create-with-parent.outputs.issue }}"
          elif [ "${{ steps.create-without-parent.outputs.issue }}" != "" ]; then
            ISSUE_NUM="${{ steps.create-without-parent.outputs.issue }}"
          fi
          
          echo "Detected issue number: '$ISSUE_NUM'"
          
          if [ -z "$ISSUE_NUM" ] || [ "$ISSUE_NUM" = "" ]; then
            echo "Error: No issue number detected"
            exit 1
          fi
          
          echo "issue=$ISSUE_NUM" >> $GITHUB_OUTPUT

      # 10. 브랜치 생성 (간소화)
      - name: Create branch
        run: |
          ISSUE_NUMBER="${{ steps.set-issue.outputs.issue }}"
          
          # Issue Parser에서 브랜치명 가져오기
          if [ "${{ env.PARSER_SUCCESS }}" = "true" ]; then
            BRANCH_INPUT="${{ steps.issue-parser.outputs.issueparser_branch }}"
          else
            BRANCH_INPUT="${{ steps.manual-parser.outputs.manual_branch }}"
          fi
          
          # 브랜치명: 이슈번호-입력받은브랜치명
          BRANCH_NAME="$ISSUE_NUMBER-$BRANCH_INPUT"
          
          echo "Creating branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"
          echo "CREATED_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

      # 11. GitHub 이슈 제목 업데이트
      - name: Update issue title
        uses: actions-cool/issues-helper@v3
        with:
          actions: update-issue
          token: ${{ secrets.GITHUB_TOKEN }}
          title: '[${{ steps.set-issue.outputs.issue }}] ${{ github.event.issue.title }}'

      # 12. 코멘트로 Jira 링크와 브랜치 정보 추가
      - name: Add comment with Jira issue link
        uses: actions-cool/issues-helper@v3
        with:
          actions: create-comment
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            🎫 **Jira Issue Created**: [${{ steps.set-issue.outputs.issue }}](${{ secrets.JIRA_BASE_URL }}/browse/${{ steps.set-issue.outputs.issue }})
            
            🌿 **Branch Created**: `${{ env.CREATED_BRANCH }}`
